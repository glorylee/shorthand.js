{"name":"Shorthand.js","tagline":"shorthand.js - a lightweight framework and syntax for prototyping common web interactions","body":"# Shorthand.js\r\n\r\n#### A lightweight, natural language syntax for describing interactive behaviors for the web.\r\n\r\nShorthand is intended for quickly prototyping behaviors in HTML mockups. The idea is to quickly test out user interactions without investing tons of time in custom JavaScript programming. Shorthand should get you 80% of the way to a functional 'web thang', without the headaches of jQuery spaghetti code.\r\n\r\nShorthand statements all follow a simple basic syntax:\r\n\r\n    (selector) should (do an action) on (user interaction)\r\n\r\n## DEMO\r\n\r\n[Here's a simple demo page so you can see ShortHand in action.](demo.html)\r\n\r\n## Setup\r\n\r\nSetup is easy - just include the base Shorthand.js file anywhere in your page, and then add custom &lt;SCRIPT&gt; blocks for your Shorthand statements\r\n\r\nShorthand requires a jQuery-compatable DOM manipulation to be loaded in the page for it to work. You can include your preferred library (Zepto.js!) and Shorthand will use whatever's available. If none is available, Shorthand will attempt to load the latest version jQuery (from cdnjs) for itself.\r\n\r\n\t<!-- Step 0: Include a specific DOM library, or not. -->\r\n\t<script src=\"//cdnjs.cloudflare.com/ajax/libs/zepto/1.0/zepto.min.js\" type=\"text/javascript\"></script>\r\n\r\n    <!-- Step 1: Include Shorthand.js -->\r\n    <script src=\"Shorthand.js\" type=\"text/javascript\"></script>\r\n\r\n    <!-- Step 2: Add <script type='text/Shorthand'> blocks -->\r\n    <script type=\"text/shorthand\"> \r\n    \t\r\n    \tStep 3: write Shorthand!\r\n    \t\r\n    \tNote that anything that doesn't match the syntax is ignored, so if you want to write out some comments like these you can.\r\n\r\n    \tHere's an example of a valid Shorthand statement that will show an element with id='dialog' when the element with id='button' is clicked:\r\n\r\n    \t#button should show #dialog on click\r\n\r\n    \tAnd here's a statement that will hide that dialog when the element with class='closebox' inside that dialog.\r\n\r\n    \t#dialog>.closebox should hide #dialog on click\r\n\r\n    </script>\r\n\r\n## Selectors\r\n\r\nYou can use any kind of CSS or jQuery-compatible selectors to specify which elements in your mockup should receive the intended behaviors - ID, class, tag name, whatever you like.\r\n\r\nThe only limitation on selectors is that they should not contain whitespace. So if you want to use a hierarchical selector like 'section > h1' simply write it as 'section>h1' and Shorthand will apply the behaviors to the correct elements as intended.\r\n\r\n## Actions\r\n\r\nThis is the good stuff.\r\n\r\nThe first word after 'should' in your statement should be one of the valid actions. (There will be more, and it's easy to extend Shorthand's actions to add custom ones, if you're interested.)\r\n\r\nSupported Actions:\r\n\r\n* toggle (target selector)\r\n* hide (target selector)\r\n* show (target selector)\r\n* toggleclass 'classname' (target selector)\r\n* addclass 'classname' (target selector)\r\n* removeclass 'classname' (target selector)\r\n* goto 'url'\r\n* load 'ajax url' (target selector)\r\n* **more are on the way** - I'd like to add animations and transitions at the very least.\r\n\r\nThe word after the action is usually another selector to describe the target for the action. Sometimes it's a valid URL, as in the 'goto' or 'load' actions.\r\n\r\n### Target Selectors\r\n\r\nTarget selectors describe the intended target for the action.  They can be vanilla CSS selectors like the main selector, or one of the special ones.\r\n\r\n* self/itself \t\t\t-- targets the main source selector of the statement.\r\n* next (selector)  \t\t-- targets the element(s) next to the source element, optionally filtered by a provided selector.\r\n* previous (selector) \t-- targets the element(s) previous to the source element, again filtered by an optional selector.\r\n\r\n### Chaining with 'and'\r\n\r\nHere's the really good stuff: you can chain multiple actions on a single main selector by simply using the 'and' keyword in your Shorthand statement.\r\n\r\n    #button should toggle #dialog and toggleclass 'active' self and load 'dialog.html' #dialog>.content on click\r\n\r\nSee what I did there?\r\n\r\n\r\n## Events\r\n\r\nThe last part of a Shorthand statement is the event that triggers the Action.\r\n\r\nEvents follow the 'on eventname' syntax, and eventname can be any valid DOM event, such as 'click', 'mouseover', 'mouseleave', 'touchstart', etc.\r\n\r\n### Page Load Events\r\n\r\nYou can also specify that events happen on page load, by simply adding 'on load'.  This is great for handling initial setup of complex states, like hiding elements that will later be revealed.\r\n\r\n    #dialog should hide itself on load\r\n\r\n## License\r\n\r\nMIT.\r\n\r\n\r\n## Extending Shorthand\r\n\r\nThere's a simple way to use JavaScript to add custom actions to Shorthand's default library of actions.\r\n\r\nIn your own javascript:\r\n\r\n    window.Shorthand.Actions.enlarge = function(origin, target) {\r\n    \ttarget = this.findTarget(target, arguments); // this is required for the magic target selectors to work, like 'self', 'next', and 'previous'\r\n    \t// After that line, you can do whatever you like here with the target DOM element.\r\n    \ttarget.css(\"font-size\", \"10em\");\r\n    }\r\n\r\nIf you develop useful Actions, please consider sending a pull request, and I'd be happy to include them in the defaults!\r\n\r\n## Roadmap\r\n\r\nI'd like to add a few things, and am open to contributions.\r\n\r\n#### Server-side generation of JavaScript from Shorthand statements.\r\n\r\nIdeally Shorthand could be run (via node.js) as part of a build script, and instead of evaluating statements and adding event handlers in-browser, the same statements could be used to generate an application skeleton of some kind.\r\n\r\n#### Animation and Transition Actions\r\n\r\nA library of simple canned animations useful for mockups? Yes please!\r\n\r\nThese would go something like this:\r\n\r\n    #button1 should animate 'slideleftin' #panel1 on click\r\n\r\n    #button2 should animate 'slideleftout' #panel2 on click\r\n\r\nI'm still figuring out a good syntax for describing these...\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}